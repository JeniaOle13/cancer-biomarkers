---
format: html
editor: source
---

# Materials and methods
## Data acquisition and preprocessing
<p style="text-align: justify;">
All 627 stool metagenomic samples from 11 published studies were downloaded from the NCBI/EBI databases using Kingfisher v0.4.1 [Woodcroft, 2022]. Data quality was assessed with FastQC v0.12.1 [Andrews et al., 2023], and raw reads were processed with fastp v0.23.4 to remove low-quality sequences [Chen et al., 2018]. Human-derived sequences were filtered out using HISAT2 v2.2 [Kim et al., 2019] with the GRCh37 human genome (Release 47) as a reference [Schneider et al, 2017].
<p>

## Assembly and binning
<p style="text-align: justify;">
Metagenomic assembly was performed using MEGAHIT v1.2.9 [Li et al., 2015], retaining contigs longer than 1000 bp. Filtered contigs were aligned to metagenomic reads using HISAT2 v2.2 [Kim et al., 2019]. Binning was conducted in two stages: (1) initial binning with MetaBAT2 v2.12.1 [Kang et al., 2019], MaxBin2 v2.2.7 [Wu et al., 2016], and Semibin2 v2.1.0 [Pan et al., 2023], followed by (2) refinement with DAS Tool v1.1.7 to improve bin quality [Sieber et al., 2018]. Bins were quality-checked with CheckM v1.2.3 [Parks et al., 2015] and dereplicated at 98% nucleotide identity using dRep v3.4.5 [Olm et al., 2017] to generate operational genomic units (OGUs).
<p>

## Taxonomic profiling and analysis
<p style="text-align: justify;">
Taxonomic annotation of bins was performed using GTDB-Tk v2.1.1 [Chaumeil et al., 2022] with the GTDB r207 database [Parks et al., 2022]. Additional data processing utilized Samtools v1.17 [Li et al., 2009], BEDTools v2.31.0 [Quinlan et al., 2010], and BBMap v39.06 [Bushnell et al., 2014]. Finally, OGU abundance profiles were generated by mapping reads to the OGU catalog using HISAT2 v2.2, followed processong with InStrain v1.9.0 [Olm et al., 2021]
<p>

## Marker OGU discovery
<p style="text-align: justify;">
The identification of OGUs associated with immunotherapy outcomes followed an established analytical framework from our previous works [Olekhnovich et al., 2023; Zakharevich et al., 2024]. Differential rankings was first performed using Songbird [Morton et al., 2019] to identify OGUs showing relative abundance variations between experimental groups, applying a conservative absolute differential value threshold of > 0.3. For candidate OGUs meeting this criterion, we subsequently calculated log-ratio abundances using Qurro [Fedarko et al., 2020] and determined statistical significance through Wilcoxon rank-sum tests implemented in the R statistical environment. The biomarker selection process incorporated stringent cross-validation criteria to ensure robust identification of microbial signatures. OGUs demonstrating consistent positive associations with therapeutic response across multiple datasets were retained as potential beneficial biomarkers, while any evidence of negative association with treatment outcome in any dataset resulted in automatic exclusion regardless of other positive associations.This approach enabled simultaneous identification of two clinically meaningful biomarker categories: microbial taxa positively correlated with successful immunotherapy outcomes and those associated with adverse therapeutic responses. The methodology emphasizes reproducibility through multi-dataset validation and maintains rigorous standards for biomarker qualification by requiring consistent directional effects across independent cohorts.
<p>

## Markers testing
<p style="text-align: justify;">
Determined R/NR biomarkers were used to calculate log ratios, followed by statistical assessment using the lmer function from the lmerTest package [Kuznetsova et al., 2017] in the R statistical environment. Post-hoc testing was performed using Tukey's method with the multcomp package [Bretz et al., 2011], applying Bonferroni correction for multiple comparisons. Model residuals were tested for normality using the Shapiro-Wilk test (shapiro.test function in R). Additional testing of marker OGU included investigating the ability of calculated log ratios to separate experimental groups using logistic regression using the method of leave-one group out cross validation. Gene-set enrichment analysis (GSEA) implemented in GSEA function from clusterProfiler package [Xu et al., 2024] using to investigate statistical relationships of OGU marker sets across taxonomy and other attributes included food, body site or pathogens.GSEA analysis results were visualized using gseavis package [Zhang et al., 2025].
<p>

## Functional profiling of marker OGU
<p style="text-align: justify;">
Functional profiles of OGUs were generated using MetaCerberus [Figueroa et al., 2024] with annotations from the Carbohydrate-Active EnZymes (CAZy) database [Drula et al., 2022] and the Kyoto Encyclopedia of Genes and Genomes (KEGG) [Kanehisa et al., 2025]. Statistical associations between functional features and experimental groups were assessed using logistic regression. Gene set enrichment analysis (GSEA) was applied to evaluate links between gene sets and immunotherapy response, with results visualized using the ggseavis package.
<p>

## Additional analysis and visualization
<p style="text-align: justify;">
For visualization and statistical analysis, we utilized the following R packages: ggplot2 [Wickham et al., 2016] for graphics creation, ggpubr [Kassambara, 2023] for publication-ready plots, hrbrthemes [Rudis, 2020] for enhanced themes, and RColorBrewer [Neuwirth, 2022] for color palette management. String data manipulation was performed using the stringr package [Wickham, 2022]. The data analysis report was generated with Quarto [Allaire et al., 2022], incorporating dynamic tables via DT [Xie et al., 2023] and enhanced download functionality using downloadthis [Sidi, 2023].
<p>

## Data availability
<p style="text-align: justify;">
In this study, we used open access data from the NCBI/EBI Sequence Read Archives, identified by the following BioProjects accession numbers: [PRJNA397906](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA397906), [PRJEB22893](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJEB22893), [PRJNA399742](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA399742), [PRJNA770295](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA770295), [PRJEB43119](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJEB43119), [PRJNA762360](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA762360), [PRJNA1011235](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA1011235), [PRJNA615114](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA615114), [PRJNA866654](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA866654), [PRJNA494824](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA494824), [PRJEB49516](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJEB49516).
MAGs catalog assembly pipeline were description in <https://github.com/JeniaOle13/Cancer_MAGs>.
All MAGs sequences were deposited in NCBI under accession [PRJNA1196825](https://www.ncbi.nlm.nih.gov/bioproject/1196825).
Songbird Qurro files for QIIME2 viewer were available at [Zenodo](https://zenodo.org/records/15182082).
Source code and Quarto report available at <https://github.com/JeniaOle13/cancer-biomarkers>.
<p>

## References
1)  [Chen, Shifu, et al. "fastp: an ultra-fast all-in-one FASTQ preprocessor." Bioinformatics 34.17 (2018): i884-i890.](https://academic.oup.com/bioinformatics/article/34/17/i884/5093234)
2)  [Li, Dinghua, et al. "MEGAHIT: an ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph." Bioinformatics 31.10 (2015): 1674-1676.](https://academic.oup.com/bioinformatics/article/31/10/1674/177884?login=true)
3)  [Kim, Daehwan, et al. "Graph-based genome alignment and genotyping with HISAT2 and HISAT-genotype." Nature biotechnology 37.8 (2019): 907-915.](https://www.nature.com/articles/s41587-019-0201-4)
4)  [Kang, Dongwan D., et al. "MetaBAT 2: an adaptive binning algorithm for robust and efficient genome reconstruction from metagenome assemblies." PeerJ 7 (2019): e7359.](https://peerj.com/articles/7359/)
5)  [Wu, Yu-Wei, Blake A. Simmons, and Steven W. Singer. "MaxBin 2.0: an automated binning algorithm to recover genomes from multiple metagenomic datasets." Bioinformatics 32.4 (2016): 605-607.](https://academic.oup.com/bioinformatics/article/32/4/605/1744462?login=true)
6)  [Pan, Shaojun, Xing-Ming Zhao, and Luis Pedro Coelho. "SemiBin2: self-supervised contrastive learning leads to better MAGs for short-and long-read sequencing." Bioinformatics 39.Supplement_1 (2023): i21-i29.](https://academic.oup.com/bioinformatics/article/39/Supplement_1/i21/7210480?login=true)
7)  [Sieber, Christian MK, et al. "Recovery of genomes from metagenomes via a dereplication, aggregation and scoring strategy." Nature microbiology 3.7 (2018): 836-843.](https://www.nature.com/articles/s41564-018-0171-1)
8)  [Parks, Donovan H., et al. "CheckM: assessing the quality of microbial genomes recovered from isolates, single cells, and metagenomes." Genome research 25.7 (2015): 1043-1055.](https://genome.cshlp.org/content/25/7/1043.short)
9)  [Olm, Matthew R., et al. "dRep: a tool for fast and accurate genomic comparisons that enables improved genome recovery from metagenomes through de-replication." The ISME journal 11.12 (2017): 2864-2868.](https://academic.oup.com/ismej/article/11/12/2864/7537826?login=true)
10) [Chaumeil, Pierre-Alain, et al. "GTDB-Tk v2: memory friendly classification with the genome taxonomy database." Bioinformatics 38.23 (2022): 5315-5316.](https://academic.oup.com/bioinformatics/article/38/23/5315/6758240?login=true)
11) [Parks, Donovan H., et al. "GTDB: an ongoing census of bacterial and archaeal diversity through a phylogenetically consistent, rank normalized and complete genome-based taxonomy." Nucleic acids research 50.D1 (2022): D785-D794.](https://academic.oup.com/nar/article/50/D1/D785/6370255?login=true)
12) [Li, Heng, et al. "The sequence alignment/map format and SAMtools." bioinformatics 25.16 (2009): 2078-2079.](https://academic.oup.com/bioinformatics/article/25/16/2078/204688?login=true)
13) [Quinlan, Aaron R., and Ira M. Hall. "BEDTools: a flexible suite of utilities for comparing genomic features." Bioinformatics 26.6 (2010): 841-842.](https://academic.oup.com/bioinformatics/article/26/6/841/244688?login=true)
14) [Bushnell, Brian. "BBMap: a fast, accurate, splice-aware aligner." (2014).](https://escholarship.org/uc/item/1h3515gn)
15) [Olm, Matthew R., et al. "inStrain profiles population microdiversity from metagenomic data and sensitively detects shared microbial strains." Nature Biotechnology 39.6 (2021): 727-736.](https://www.nature.com/articles/s41587-020-00797-0)
16) [Olekhnovich, Evgenii I., et al. "Consistent stool metagenomic biomarkers associated with the response to melanoma immunotherapy." mSystems 8.2 (2023): e01023-22.](https://journals.asm.org/doi/full/10.1128/msystems.01023-22)
17) [Zakharevich, Natalia V., et al. "Systemic metabolic depletion of gut microbiome undermines responsiveness to melanoma immunotherapy." Life Science Alliance 7.5 (2024).](https://www.life-science-alliance.org/content/7/5/e202302480.abstract)
18) [Morton, James T., et al. "Establishing microbial composition measurement standards with reference frames." Nature communications 10.1 (2019): 2719.](https://www.nature.com/articles/s41467-019-10656-5)
19) [Fedarko, Marcus W., et al. "Visualizing’omic feature rankings and log-ratios using Qurro." NAR genomics and bioinformatics 2.2 (2020): lqaa023.](https://academic.oup.com/nargab/article/2/2/lqaa023/5826153?login=true)
20) [Bolyen, Evan, et al. "Reproducible, interactive, scalable and extensible microbiome data science using QIIME 2." Nature biotechnology 37.8 (2019): 852-857.](https://www.nature.com/articles/s41587-019-0209-9)
21) [Kuznetsova, Alexandra, Per B. Brockhoff, and Rune HB Christensen. "lmerTest package: tests in linear mixed effects models." Journal of statistical software 82 (2017): 1-26.](https://www.jstatsoft.org/article/view/v082i13/0)
22) [Bretz, F., Hothorn, T., & Westfall, P. (2011). Multiple comparisons using R. CRC Press.](https://doi.org/10.1201/9781420010909)
23) [Xu S, Hu E, Cai Y, Xie Z, Luo X, Zhan L, Tang W, Wang Q, Liu B, Wang R, Xie W, Wu T, Xie L, Yu G (2024). “Using clusterProfiler to characterize multiomics data.” Nature Protocols, 19(11), 3292-3320. doi:10.1038/s41596-024-01020-z](https://www.nature.com/articles/s41596-024-01020-z)
24) [Zhang, Jun, et al. "GseaVis: An R Package for Enhanced Visualization of Gene Set Enrichment Analysis in Biomedicine." Med Research (2025).](https://onlinelibrary.wiley.com/doi/full/10.1002/mdr2.70000)
25) [Figueroa III, Jose L., et al. "MetaCerberus: distributed highly parallelized HMM-based processing for robust functional annotation across the tree of life." Bioinformatics 40.3 (2024): btae119.](https://academic.oup.com/bioinformatics/article/40/3/btae119/7616988)
26) [Drula, Elodie, et al. "The carbohydrate-active enzyme database: functions and literature." Nucleic acids research 50.D1 (2022): D571-D577.](https://academic.oup.com/nar/article/50/D1/D571/6445960?searchresult=1)
27) [Kanehisa, Minoru, et al. "KEGG: biological systems database as a model of the real world." Nucleic Acids Research 53.D1 (2025): D672-D677.](https://academic.oup.com/nar/article/53/D1/D672/7824602?searchresult=1)
28) [Wickham, H. (2016). ggplot2: Elegant graphics for data analysis (2nd ed.). Springer-Verlag.](https://doi.org/10.1007/978-3-319-24277-4)
29) [Kassambara A (2023). ggpubr: 'ggplot2' Based Publication Ready Plots. R package version 0.6.0.](https://rpkgs.datanovia.com/ggpubr/)
30) [Rudis, Bob. hrbrthemes: Additional Themes, Theme Components and Utilities for 'ggplot2'. R package version 0.8.0, 2020.](https://github.com/hrbrmstr/hrbrthemes)
31) [Neuwirth, Erich. RColorBrewer: ColorBrewer Palettes. R package version 1.1-3, 2022.](https://CRAN.R-project.org/package=RColorBrewer)
32) [Wickham, Hadley. stringr: Simple, Consistent Wrappers for Common String Operations. R package version 1.5.0, 2022.](https://CRAN.R-project.org/package=stringr)
33) [Allaire, J. J., et al. Quarto. Version 1.3, 2022.](https://quarto.org/.)
34) [Xie, Yihui, Joe Cheng, and Xianying Tan. DT: A Wrapper of the JavaScript Library 'DataTables'. R package version 0.28, 2023](https://CRAN.R-project.org/package=DT)
35) [Sidi, Fahim. downloadthis: Implement Download Buttons in 'R Markdown'. R package version 1.0.0, 2023](https://CRAN.R-project.org/package=downloadthis)
36) [Woodcroft, Ben J. Kingfisher: Rapid SRA Download Tool. Version 0.4.1, 2022](https://github.com/wwood/kingfisher-download)
37) [Andrews S. FastQC: A quality control tool for high throughput sequence data. Version 0.12.1, 2023.](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/)
38) [Schneider VA, et al. Evaluation of GRCh38 and de novo haploid genome assemblies demonstrates the enduring quality of the reference assembly. Genome Research 2017;27(5):849-864.](doi:10.1101/gr.213611.116)

```{r}
#| include: false
library(ggplot2)
library(ggpubr)
library(ggrepel)
library(ggdist)
library(scatterpie)
library(stringr)
library(RColorBrewer)
library(lmerTest)
library(multcomp)
library(fgsea)
library(hrbrthemes)
library(dplyr)
library(readr)
library(ggdist)
library(effectsize)
library(reshape2)
library(clusterProfiler)
library(GseaVis)

library(tidyverse)
library(tidymodels)
library(themis)
library(pROC)
library(recipeselectors)

library(DT)
library(downloadthis)
```

```{r}
#| include: false
#| 
meta_data <- read.csv("data/meta_data.tsv", sep = "\t")
```

```{r}
#| include: false

ogu_table <- read.csv("data/ogu_table.tsv", sep = "\t")
```

```{r}
#| include: false

taxonomy <- read.csv("data/taxonomy.tsv", sep = "\t", row.names = 1)

kingdom <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[1])
phylum <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[2])
class_t <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[3])
order_t <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[4])
family_t <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[5])

genus <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[6])
genus[genus == "g__"] <- paste0(family_t[which(genus == "g__")], "_unknown")

species <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[7])

kingdom <- sub("d__", "", kingdom)
phylum <- sub("p__", "", phylum)
class_t <- sub("c__", "", class_t)
order_t <- sub("o__", "", order_t)
family_t <- sub("f__", "", family_t)
genus <- sub("g__", "", genus)
species <- sub("s__", "", species)

species <- gsub(paste(paste0("_", LETTERS), collapse = "|"), "", species)
genus <- gsub(paste(paste0("_", LETTERS), collapse = "|"), "", genus)

tax_table <- data.frame(kingdom, phylum, class = class_t, order = order_t, family = family_t, genus, species)
rownames(tax_table) <- rownames(taxonomy)

tax_table$phylum <- sapply(str_split(tax_table$phylum, "_"), function(x) x[1])
tax_table <- tax_table[rownames(tax_table) %in% colnames(ogu_table),]
```

```{r}
#| include: false

statistic <- read.csv("data/statistic.tsv", sep = "\t")
```

```{r}
#| include: false

ogu_table_t <- as.data.frame(t(ogu_table))
ogu_table_t <- cbind(featureid = rownames(ogu_table_t), ogu_table_t)
ogu_table_t <- merge(cbind(featureid = rownames(tax_table), tax_table), ogu_table_t, by = 1)
ogu_table_t <- ogu_table_t[-1]
```

```{r}
#| include: false

ogu.markers <- read.csv("data/ogu.biomarkers.tsv", sep = "\t")
ogu.markers <- merge(ogu.markers[c(2,1,3:6)], cbind(rownames(tax_table), tax_table), by = 1)
```

```{r}
#| include: false

songbird_Frankel_2017 <- read.csv("data/songbird/Frankel_2017/differentials.tsv", sep = "\t")
songbird_Gopalakrishnan_2019 <- read.csv("data/songbird/Gopalakrishnan_2019/differentials.tsv", sep = "\t")
songbird_Matson_2019 <- read.csv("data/songbird/Matson_2019/differentials.tsv", sep = "\t")

songbird_Spencer_2021 <- read.csv("data/songbird/Spencer_2021/differentials.tsv", sep = "\t")
songbird_Lee_2022 <- read.csv("data/songbird/Lee_2022/differentials.tsv", sep = "\t")

songbird_Liu_2022 <- read.csv("data/songbird/Liu_2022/differentials.tsv", sep = "\t")
songbird_McCulloch_2022 <- read.csv("data/songbird/McCulloch_2022/differentials.tsv", sep = "\t")
songbird_Peng_2020 <- read.csv("data/songbird/Peng_2020/differentials.tsv", sep = "\t")
songbird_Tsakmaklis_2023 <- read.csv("data/songbird/Tsakmaklis_2023/differentials.tsv", sep = "\t")
songbird_Gunjur_2024 <- read.csv("data/songbird/Gunjur_2024/differentials.tsv", sep = "\t")
songbird_Heshiki_2020 <- read.csv("data/songbird/Heshiki_2020/differentials.tsv", sep = "\t")
```

```{r}
#| include: false
songbird_coef <- rbind(songbird_Frankel_2017, songbird_Gopalakrishnan_2019, songbird_Matson_2019,
      songbird_Spencer_2021, songbird_Lee_2022, songbird_Liu_2022, songbird_McCulloch_2022,
      songbird_Peng_2020, songbird_Tsakmaklis_2023, songbird_Gunjur_2024, songbird_Heshiki_2020)

songbird_coef <- songbird_coef %>% group_by(featureid) %>% summarise(mean = mean(response.T.R.), sd = sd(response.T.R.))
songbird_coef <- as.data.frame(songbird_coef)

ogu.markers <- merge(ogu.markers, songbird_coef, by = 1)
ogu.markers <- ogu.markers[order(ogu.markers$num_datasets, decreasing = T),]
rownames(ogu.markers) <- 1:nrow(ogu.markers)
```

```{r}
#| include: false
body_site <- read.csv("data/body_ogu.tsv", sep = "\t")[-2]
colnames(body_site)[2] <- "site"
body_site$genome <- sub(".fa", "", body_site$genome)

food <- read.csv("data/food_ogu.txt", sep = "\t", header = F)
colnames(food) <- "genome"
food$site <- "food"
food$genome <- sub(".fa", "", food$genome)
```

```{r}
#| include: false
#| warning: false
loc <- read_tsv('data/sum_location.tsv')

loc <- loc %>% 
  mutate(`sample number` = R + NR) %>% 
  mutate(nud_lat = case_when(              # nudging latitude to avoid overlaps
    dataset == 'Spencer_2021' ~ lat + 30,
    dataset == 'Matson_2019' ~ lat + 15,
    #dataset == 'Frankel_2017' ~ lat - 10,
    dataset == 'Gopalakrishnan_2018' ~ lat - 15,
    lat_lon == '51.49766788 N -0.119759159 W' ~ lat - 15,
    lat_lon == '53.80605739 N -1.522751916 W' ~ lat + 15,
    lat_lon == '53.22142806 N 6.574345097 E' ~ lat + 10,
    .default = lat)) %>% 
  mutate(nud_lon = case_when(              # nudging longititude to avoid overlaps
    dataset == 'Spencer_2021' ~ lon - 30,
    dataset == 'Matson_2019' ~ lon + 5,
    #dataset == 'Frankel_2017' ~ lon - 15,
    dataset == 'Gopalakrishnan_2018' ~ lon + 5,
    lat_lon == '51.49766788 N -0.119759159 W' ~ lon - 25,
    lat_lon == '53.42969912 N -2.228100629 W' ~ lon - 15,
    lat_lon == '53.80605739 N -1.522751916 W' ~ lon + 5,
    lat_lon == '53.22142806 N 6.574345097 E' ~ lon + 20,
    .default = lon))
```

```{r}
#| include: false
#| warning: false
CAZy <- read.csv("data/CAZy.tsv", sep = "\t")
KEGG <- read.csv("data/KEGG.tsv", sep = "\t")

CAZy_sets <- read.csv("data/CAZy-sets.tsv", sep = "\t")
KEGG_sets <- read.csv("data/KEGG-sets.tsv", sep = "\t")
```

# Results
## Data overview
<p style="text-align: justify;">
The analysis incorporated 627 gut metagenomic profiling samples obtained from 11 independent external datasets.
Patients were stratified by immunotherapy response into two groups: responders (R group, n = 365; 58.2%) and non-responders (NR group, n = 262; 41.8%).
Response assessment followed RECIST 1.1 criteria, with the R group including patients showing complete response (CR), partial response (PR), or stable disease (SD) at 6-month follow-up, while the NR group comprised exclusively progressive disease (PD) cases.
The study cohort received various immunotherapy regimens, including anti-PD1, anti-CTLA4, or combination therapies.
Cancer type distribution revealed melanoma predominance (n = 456; 72.7%), followed by gastrointestinal (GI) cancers (n = 82; 13.1%), non-small cell lung cancer (n = 15; 2.4%), breast cancer (n = 4; 0.6%), ovarian cancer (n = 2; 0.3%), and other malignancies (n = 68; 10.8%).
All samples were collected prior to treatment initiation to evaluate baseline microbiota status.
<p>

```{r}
#| label: dvsdfv
#| include: false
sample_map <- ggplot(data = loc) +
    borders("world", colour = "gray58", fill = "gray") +
    # coord_cartesian(xlim = c(-180, 180), ylim = c(-55, 85)) +
    geom_point(aes(x = nud_lon, y = nud_lat, size = `sample number`), shape = 1) +
    scale_radius(range = c(7, 18)) +
  geom_scatterpie(
      aes(x = nud_lon, y = nud_lat, group = dataset, r = sqrt(`sample number`)),
      cols = c("R", "NR"),
      color = 'black') +
  scale_fill_manual(values = c("R" = "#377EB8", "NR" = "#E41A1C")) +
  geom_segment(aes(x = nud_lon, y = nud_lat, xend = lon, yend = lat), 
               color = 'gray25', linewidth = 0.7) +
  geom_label_repel(aes(x = nud_lon, y = nud_lat, label = dataset),
    size = 4, direction = "both", segment.color = 'black',
    force = 4, min.segment.length = 0.5, nudge_x = -2) +
  labs(x = "Longitude", y = "Latitude") +
  theme_bw()+
    theme(
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) + 
    theme(
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(fill = NA))
```

```{r fig.width=15, fig.height=6}
#| echo: false
#| message: false
#| warning: false
#| fig-cap: Figure 1. Global distribution of collected samples (n=627) across countries. Circle size represents sample count per region, while color indicates the proportion of patients responsive (or non-responsive) to immunotherapy.
sample_map
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(meta_data, 
          caption = "Table 1. Metadata.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

## Quality control
<p style="text-align: justify;">
Following quality filtering with fastp, aggregated quality metrics were compiled using MultiQC to summarize the FastQC reports (MultiQC are attached to the report below).
Before filtering, approximately \~15bn reads (mean ± SD: 24 ± 15 mln reads per sample) were retained for downstream analysis, with an average of 34 ± 18% of reads per sample removed during quality control (see Table 2 for detailed filtering statistics).
<p>

[MultiQC report](data/multiqc_report.html)

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(statistic, 
          caption = "Table 2. Quality control statistic.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

## Taxonomic composition
<p style="text-align: justify;">
A total of 3649 OGUs belonging to 12 bacterial phyla were detected in 627 samples.
The most numerous of these were Firmicutes (n = 2443), Actinobacteriota (n = 590), Bacteroidota (n = 394), Proteobacteria (n = 140), Desulfobacterota (n = 27) and others (n = 55).
OGU abundance profiles of stool samples presented in Table 3.
<p>

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(ogu_table_t, 
          caption = "Table 3. OGU table.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

## Marker OGUs discovery
<p style="text-align: justify;">
The analysis of marker OGUs using Songbird and Qurro identified 793 significant features, with 326 enriched in responders (R) and 467 enriched in non-responders (NR).
Among R markers, the most prominent species included *Blautia wexlerae* (n = 49), *Faecalibacterium prausnitzii* (n = 27), *Fusicatenibacter saccharivorans* (n = 15), *Gemmiger qucibialis* (n = 14), and *Blautia faecis* (n = 8).
In contrast, non-responders exhibited enrichment of different microbial taxa, including *F. prausnitzii* (n = 17), *Dysosmobacter* sp001916835 (n = 12), *Dialister invisus* (n = 11), *Veillonella parvula* (n = 9), and ER4 sp000765235 (n = 7).
Notably, while *F. prausnitzii* was detected in both groups, its higher abundance in responders (27 vs. 17 OGEs) implies that strain-level differences or functional variations could influence clinical outcomes.
The strong association of *Blautia* species, particularly *B. wexlerae*, with responders highlights its potential as a biomarker for positive treatment response.
It is also important to note the association of oral bacteria *V. parvula* and *D. invisus* with negative outcomes of immunotherapy.
Marker OGEs description as detailed in Table 4.
<p>

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(ogu.markers, 
          caption = "Table 4. Marker OGU table with Sondbird coefficientis MEAN ± SD.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r}
#| include: false
coef_barplot <- ggplot(songbird_coef, aes(x = reorder(featureid, mean), y=mean)) + 
    geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
        position=position_dodge(0.05), col = "gray58") +
    # geom_point(shape = 0, size = 0.25)+
    geom_hline(yintercept = 0, col = "red")+
    theme_bw()+
    theme(
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) + 
    theme(
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(fill = NA))+
    ylab("Mean R/NR + k")+
    xlab("OGUs")
```

```{r fig.width=8, fig.height=3}
#| echo: false
download_this(
  coef_barplot,
  output_name = "coef_barplot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=8, fig.height=3}
#| echo: false
#| fig-cap: Figure 2. The barplot depicts Songbird differential abundance coefficients (MEAN ± SD) for marker Operational Genomic Units (OGUs), with the x-axis representing individual OGUs and the y-axis showing the magnitude and direction of association coefficients.
coef_barplot
```

```{r}
#| include: false
library(zCompositions)

ogu_table.markers <- ogu_table[colnames(ogu_table) %in% ogu.markers$featureid]
ogu_table.markers <- ogu_table.markers + 0.0001

df.log_ratio <- NULL
for (i in rownames(ogu_table.markers)){
    df <- ogu_table.markers[rownames(ogu_table.markers) %in% i,]
    
    df_denominator <- df[colnames(df) %in% ogu.markers$featureid[ogu.markers$biomarker == "denominator"]]
    df_numerator <- df[colnames(df) %in% ogu.markers$featureid[ogu.markers$biomarker == "numerator"]]
    
    df_denominator <- df_denominator[df_denominator > 0]
    df_numerator <- df_numerator[df_numerator > 0]
    
    log_ratio <- log(sum(df_numerator)/sum(df_denominator))
    df.s <- data.frame(sampleid = i, log_ratio)
    df.log_ratio <- rbind(df.s, df.log_ratio)
}

df.log_ratio <- merge(meta_data, df.log_ratio, by = 1)
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(df.log_ratio, 
          caption = "Table 5. Log ratio table",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r}
#| message: true
#| warning: false
#| include: false
logratio_plot <- ggplot(df.log_ratio, aes(log_ratio, response, col = response))+
    stat_halfeye()+
    xlab("Response")+
    ylab("Log ratio")+
    theme_pubr()+
    theme(legend.position = "none")+
    scale_color_brewer(palette = "Set1")
```

```{r fig.width=4, fig.height=3}
#| message: false
#| warning: false
#| include: false
download_this(
  logratio_plot,
  output_name = "logratio_plot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=4, fig.height=3}
#| echo: false
#| fig-cap: Figure 3. Log ratio boxplot.
logratio_plot
```

```{r}
#| echo: false
lmer.log_ratio <- lmer(log_ratio ~ response + (1|dataset), data=df.log_ratio)
```

##### lmer test results
```{r}
#| echo: false
summary(glht(lmer.log_ratio, linfct = mcp(response = "Tukey")), test = adjusted("bonferroni"))
```

##### Dataset variable inportance
```{r}
#| echo: false
ranova(lmer.log_ratio)
```

##### Residuals of the model normality testing
```{r}
#| echo: false
shapiro.test(residuals(lmer.log_ratio))
```

##### Effect size estimation
```{r}
#| echo: false
cohens_d(log_ratio ~ response, data=df.log_ratio)
```

```{r}
#| message: false
#| warning: false
#| include: false

df.log_ratio <- merge(df.log_ratio, statistic[-2], by = 1)

df.log_ratio$response <- factor(df.log_ratio$response, levels = c("R", "NR"))
df.log_ratio$dataset <- factor(df.log_ratio$dataset)

groups <- unique(df.log_ratio$dataset)

recipe_balanced <- recipe(response ~ log_ratio, data = df.log_ratio) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_smote(response, over_ratio = 0.8)

model <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

workflow_balanced <- workflow() %>%
  add_recipe(recipe_balanced) %>%
  add_model(model)

logo_cv <- function(group) {
  
  test_data <- df.log_ratio %>% filter(dataset == group)
  train_data <- df.log_ratio %>% filter(dataset != group)
  
  
  fitted_model <- fit(workflow_balanced, data = train_data)
  
  
  predictions <- fitted_model %>%
    predict(new_data = test_data, type = "prob") %>%
    bind_cols(
      predict(fitted_model, new_data = test_data, type = "class"),
      test_data
    )
  
  list(
    predictions = predictions,
    metrics = predictions %>%
      metrics(truth = response, estimate = .pred_class, .pred_R)
  )
}

logo_results <- map(groups, logo_cv, .progress = TRUE)

all_predictions <- map_dfr(logo_results, ~.x$predictions)

roc_curve_logo <- all_predictions %>%
  roc_curve(truth = response, .pred_R)

roc_plot <- autoplot(roc_curve_logo) +
  ggtitle("ROC Curve from LOGO CV") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
  theme_minimal()

group_performance <- all_predictions %>%
  group_by(dataset) %>%
  summarise(
    auc = roc_auc_vec(truth = response, .pred_R),
    accuracy = accuracy_vec(truth = response, estimate = .pred_class),
    sensitivity = sensitivity_vec(truth = response, estimate = .pred_class),
    specificity = specificity_vec(truth = response, estimate = .pred_class),
    precision = precision_vec(truth = response, estimate = .pred_class),
    .groups = "drop"
  )

group_performance$f1_score <- 2 * (group_performance$precision * group_performance$sensitivity) / 
  (group_performance$precision + group_performance$sensitivity)

group_performance_melt <- melt(group_performance)
colnames(group_performance_melt)[c(2,3)] <- c("metrics", "value")

metrics_plot <- ggplot(group_performance_melt, aes(value, metrics))+
    stat_halfeye()+
    xlab("Value")+
    ylab("Metrics")+
    theme_pubr()+
    theme(legend.position = "none")
```

```{r fig.height=4, fig.width=3}
#| message: false
#| warning: false
#| include: false
download_this(
  roc_plot,
  output_name = "roc_plot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=4, fig.height=4}
#| echo: false
#| fig-cap: Figure 4. ROC AUC plot.
roc_plot
```

```{r}
#| echo: false
#| message: false
#| warning: false
group_performance[-1] <- apply(group_performance[-1], 2, function(x) round(x, 2))

datatable(group_performance, 
          caption = "Table 6. Log regression prediction metrics.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r fig.width=4.5, fig.height=3.5}
#| message: false
#| warning: false
#| include: false
download_this(
  metrics_plot,
  output_name = "metrics_plot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=4.5, fig.height=3.5}
#| echo: false
#| fig-cap: Figure 5. Log regression prediction metrics plot.
metrics_plot
```

## Marker OGUs features
```{r}
#| message: false
#| warning: false
#| include: false
vec <- ogu.markers$mean
names(vec) <- ogu.markers$featureid
vec <- sort(vec, decreasing = T)

fgsea_phylum <- GSEA(vec, TERM2GENE = ogu.markers[c(8,1)], eps = 0)

fgsea_phylum_df <- as.data.frame(fgsea_phylum)
rownames(fgsea_phylum_df) <- 1:nrow(fgsea_phylum_df)
fgsea_phylum_df <- fgsea_phylum_df[-2]

fgsea_genus <- GSEA(vec, TERM2GENE = ogu.markers[c(12,1)], eps = 0)

fgsea_genus_df <- as.data.frame(fgsea_genus)
rownames(fgsea_genus_df) <- 1:nrow(fgsea_genus_df)
fgsea_genus_df <- fgsea_genus_df[-2]
fgsea_genus_df <- fgsea_genus_df[order(fgsea_genus_df$NES, decreasing = T),]

gsea_phylum_plot <- gseaNb(object = fgsea_phylum,
       geneSetID = fgsea_phylum_df$ID, 
       curveCol = brewer.pal(name = "Set1", n = 9), 
       htCol = c("#A50F15", "#08519C"))

gsea_genus_plot <- gseaNb(object = fgsea_genus,
       geneSetID = fgsea_genus_df$ID, 
       curveCol = c(brewer.pal(name = "Set1", n = 9)[-6], "cyan4"), 
       htCol = c("#A50F15", "#08519C"))
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(fgsea_phylum_df[1:8], 
          caption = "Table 7. GSEA results phylum level.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r fig.width=6, fig.height=5.5}
#| message: false
#| warning: false
#| include: false
download_this(
  gsea_phylum_plot,
  output_name = "gsea_phylum_plot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=6, fig.height=5.5}
#| echo: false
#| fig-cap: Figure 6. GSEA results phylum level.
gsea_phylum_plot
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(fgsea_genus_df[1:8], 
          caption = "Table 8. GSEA results genus level.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r fig.width=6, fig.height=5.5}
#| message: false
#| warning: false
#| include: false
download_this(
  gsea_genus_plot,
  output_name = "gsea_genus_plot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=6, fig.height=5.5}
#| echo: false
#| fig-cap: Figure 6. GSEA results genus level.
gsea_genus_plot
```

```{r}
#| message: false
#| warning: false
#| include: false

food$site <- "Food"
fgsea_food <- GSEA(vec, TERM2GENE = food[c(2,1)], eps = 0, pAdjustMethod = "BH")

fgsea_food_df <- as.data.frame(fgsea_food)
rownames(fgsea_food_df) <- 1:nrow(fgsea_food_df)
fgsea_food_df <- fgsea_food_df[-2]
fgsea_food_df <- fgsea_food_df[order(fgsea_food_df$NES, decreasing = T),]

core_enrichment_food <- tax_table[rownames(tax_table) %in% unlist(str_split(fgsea_food_df$core_enrichment, pattern = "\\/")),]
core_enrichment_food <- core_enrichment_food[order(core_enrichment_food$species),]

fgsea_bodysite <- GSEA(vec, TERM2GENE = body_site[c(2,1)], pAdjustMethod = "BH")

fgsea_bodysite_df <- as.data.frame(fgsea_bodysite)
rownames(fgsea_bodysite_df) <- 1:nrow(fgsea_bodysite_df)
fgsea_bodysite_df <- fgsea_bodysite_df[-2]
fgsea_bodysite_df <- fgsea_bodysite_df[order(fgsea_bodysite_df$NES, decreasing = T),]

core_enrichment_bodysite <- tax_table[rownames(tax_table) %in% unlist(str_split(fgsea_bodysite_df$core_enrichment, pattern = "\\/")),]
core_enrichment_bodysite <- core_enrichment_bodysite[order(core_enrichment_bodysite$species),]

gsea_food_plot <- gseaNb(fgsea_food, 
       geneSetID = 'Food', 
       htCol = c("#A50F15", "#08519C"))

gsea_bodysite_plot <- gseaNb(object = fgsea_bodysite,
       geneSetID = 'Oral cavity', 
       htCol = c("#A50F15", "#08519C"))
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(fgsea_food_df[1:8], 
          caption = "Table 9. GSEA results: food.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(core_enrichment_food, 
          caption = "Table 10. GSEA results: food - core enrichment.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r fig.width=4.5, fig.height=3.5}
#| message: false
#| warning: false
#| include: false
download_this(
  gsea_food_plot,
  output_name = "gsea_food_plot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=4.5, fig.height=3.5}
#| echo: false
#| fig-cap: Figure 7. GSEA results food.
gsea_food_plot
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(fgsea_bodysite_df[1:8], 
          caption = "Table 11. GSEA results: bodysite.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r}
#| echo: false
#| message: false
#| warning: false
datatable(core_enrichment_bodysite, 
          caption = "Table 12. GSEA results: bodysite - core enrichment.",
          style = "bootstrap5", 
          extensions = 'Buttons', 
          options = list(dom = 'lBfrtip',
                         buttons = c('csv', 'excel')))
```

```{r fig.width=4.5, fig.height=3.5}
#| message: false
#| warning: false
#| include: false
download_this(
  gsea_bodysite_plot,
  output_name = "gsea_bodysite_plot",
  output_extension = ".pdf",
  button_label = "PDF",
  button_type = "primary"
)
```

```{r fig.width=4.5, fig.height=3.5}
#| echo: false
#| fig-cap: Figure 8. GSEA results bodysite.
gsea_bodysite_plot
```

## Functional analysis
```{r}

cazy.genes <- data.frame()  # Лучше инициализировать как пустой data.frame

for(i in colnames(CAZy)) {
  ft <- cbind(rownames(CAZy), CAZy[, i, drop = FALSE])  # Более безопасное подмножество
  colnames(ft) <- c("id", "gene")
  
  ft <- merge(ogu.markers, ft, by = 1)
  ft <- ft[, c(1, 2, ncol(ft))]  # Более универсальный выбор столбцов
  colnames(ft)[3] <- "gene"
  
  ft$biomarker <- as.factor(ft$biomarker)
  ft$gene <- as.factor(ft$gene)
  
  if (nlevels(ft$gene) > 1) {  # Более надежная проверка уровней факторов
    # Вычисление OR
    OR <- oddsratio(table(ft[, c("biomarker", "gene")]))
    
    # Логистическая регрессия
    model <- glm(biomarker ~ gene, 
                 data = ft,
                 family = binomial())
    
    # Сохранение результатов
    cazy.genes <- rbind(cazy.genes, 
                        data.frame(
                          gene = i, 
                          coefficient = coef(model)[2], 
                          odds_ratio = OR$Odds_ratio,
                          CI_low = OR$CI_low,
                          CI_high = OR$CI_high,
                          p_value = summary(model)$coefficients[2,4]
                        ))
  }
}

cazy.genes <- cazy.genes[cazy.genes$CI_low != "NaN",]
cazy.genes <- cazy.genes[cazy.genes$CI_high != "NaN",]

vec_cazy <- -log10(cazy.genes$p_value)
names(vec_cazy) <- cazy.genes$gene

cazy_coef <- cazy.genes$coefficient
cazy_coef[cazy_coef > 0] <- 1
cazy_coef[cazy_coef < 0] <- -1

vec_cazy <- vec_cazy*cazy_coef

vec_cazy <- sort(vec_cazy, decreasing = T)

fgsea_cazy <- GSEA(vec_cazy, TERM2GENE = CAZy_sets[c(1,2)], eps = 0, pAdjustMethod = "BH")

fgsea_cazy_df <- as.data.frame(fgsea_cazy)
rownames(fgsea_cazy_df) <- 1:nrow(fgsea_cazy_df)
fgsea_cazy_df <- fgsea_cazy_df[-2]
fgsea_cazy_df <- fgsea_cazy_df[order(fgsea_cazy_df$NES, decreasing = T),]

core_enrichment_GH <- unlist(str_split(fgsea_cazy_df$core_enrichment, pattern = "\\/"))
core_enrichment_GH <- merge(data.frame(core_enrichment_GH), CAZy_sets[c(2,3)], by = 1)
colnames(core_enrichment_GH) <- c("family", "function")
core_enrichment_GH <- core_enrichment_GH[order(core_enrichment_GH$family),]

gsea_cazy_plot <- gseaNb(fgsea_cazy, 
       geneSetID = fgsea_cazy_df$ID, 
       htCol = c("#A50F15", "#08519C"))
```

```{r}
CAZy_core <- CAZy[colnames(CAZy) %in% core_enrichment_GH$family]
CAZy_core <- CAZy_core[rowSums(CAZy_core) > 20,]
CAZy_core <- as.data.frame(rowSums(CAZy_core))

CAZy_core <- merge(ogu.markers, cbind(rownames(CAZy_core), CAZy_core), by = 1)
colnames(CAZy_core)[ncol(CAZy_core)] <- "core_cazy"
CAZy_core$status <- 1

CAZy_core <- CAZy_core[c("genus", "biomarker", "status")] %>% group_by(genus, biomarker) %>% summarise(freq = sum(status))
CAZy_core <- CAZy_core[order(CAZy_core$freq, decreasing = T),]
```

```{r}
kegg.genes <- data.frame()  # Лучше инициализировать как пустой data.frame

for(i in colnames(KEGG)) {
  ft <- cbind(rownames(KEGG), KEGG[, i, drop = FALSE])  # Более безопасное подмножество
  colnames(ft) <- c("id", "gene")
  
  ft <- merge(ogu.markers, ft, by = 1)
  ft <- ft[, c(1, 2, ncol(ft))]  # Более универсальный выбор столбцов
  colnames(ft)[3] <- "gene"
  
  ft$biomarker <- as.factor(ft$biomarker)
  ft$gene <- as.factor(ft$gene)
  
  if (nlevels(ft$gene) > 1) {  # Более надежная проверка уровней факторов
    # Вычисление OR
    OR <- oddsratio(table(ft[, c("biomarker", "gene")]))
    
    # Логистическая регрессия
    model <- glm(biomarker ~ gene, 
                 data = ft,
                 family = binomial())
    
    # Сохранение результатов
    kegg.genes <- rbind(kegg.genes, 
                        data.frame(
                          gene = i, 
                          coefficient = coef(model)[2], 
                          odds_ratio = OR$Odds_ratio,
                          CI_low = OR$CI_low,
                          CI_high = OR$CI_high,
                          p_value = summary(model)$coefficients[2,4]
                        ))
  }
}

kegg.genes <- kegg.genes[kegg.genes$CI_low != "NaN",]
kegg.genes <- kegg.genes[kegg.genes$CI_high != "NaN",]

vec_kegg <- -log10(kegg.genes$p_value)
names(vec_kegg) <- kegg.genes$gene

kegg_coef <- kegg.genes$coefficient
kegg_coef[kegg_coef > 0] <- 1
kegg_coef[kegg_coef < 0] <- -1

vec_kegg <- vec_kegg*kegg_coef

vec_kegg <- sort(vec_kegg, decreasing = T)

fgsea_kegg <- gseKEGG(geneList = vec_kegg, organism = "ko", eps = 0, pAdjustMethod = "BH", pvalueCutoff = 0.01)

fgsea_kegg_df <- as.data.frame(fgsea_kegg)
rownames(fgsea_kegg_df) <- 1:nrow(fgsea_kegg_df)
fgsea_kegg_df <- fgsea_kegg_df[-2]
fgsea_kegg_df <- fgsea_kegg_df[order(fgsea_kegg_df$NES, decreasing = T),]

gsea_cazy_plot <- gseaNb(fgsea_kegg, 
       geneSetID = fgsea_kegg_df$ID, 
       curveCol = c(brewer.pal(name = "Set1", n = 9)[-6], "cyan4"),
       htCol = c("#A50F15", "#08519C"))

core_enrichment_WL <- unlist(str_split(fgsea_kegg_df$core_enrichment[[1]], pattern = "\\/"))
as.factor(core_enrichment_WL)
```

