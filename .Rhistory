exit()
q()
mean(c(0.81+0.64+0.75))
mean(c(0.81,0.64,0.75))
sd(c(0.81,0.64,0.75))
wilcox.test(c(0.81,0.64,0.75), c(0.98, 0.65, 0.95, 0.74, 0.69, 0.70, 0.66))
c(48246036, 59560164, 8248703, 36393634, 	40823672, 39871898, 39288274, 	43289811)
mean(c(48246036, 59560164, 8248703, 36393634, 	40823672, 39871898, 39288274, 	43289811))
sd(c(48246036, 59560164, 8248703, 36393634, 	40823672, 39871898, 39288274, 	43289811))
mean(c(55355726, 34877925, 28022685, 4611877))
sd(c(55355726, 34877925, 28022685, 4611877))
BiocManager::install("GenomicAlignments")
BiocManager::install("GenomicAlignments")
BiocManager::install("lme4")
library(Rsamtools)
scanBam("~/Documents/github/MetaFX_biology/enterocloster_clostridioformis/franzosa_cd.bam")
franzosa_cd <- read.csv("~/Documents/github/MetaFX_biology/enterocloster_clostridioformis/franzosa_cd.txt", sep = "\t", header = F)
franzosa_cd_sbs <- franzosa_cd[franzosa_cd$V3 > 0,]
View(franzosa_cd_sbs)
plot(franzosa_cd$V3)
hist(franzosa_cd$V3)
plot(franzosa_cd_sbs$V3)
View(franzosa_cd)
franzosa_cd_sbs$V3
table(franzosa_cd_sbs$V3)
library(ggplot2)
ggpplot(franzosa_cd_sbs, aes(V2, V3))+
geom_bar()
ggplot(franzosa_cd_sbs, aes(V2, V3))+
geom_bar()
ggplot(franzosa_cd_sbs, aes(V2, V3))+
geom_bar(stat = "identity")
franzosa_cd_sbs
ggplot(franzosa_cd_sbs, aes(V2, V3))+
geom_bar(stat = "identity",width = 2)
ggplot(franzosa_cd, aes(V2, V3))+
geom_bar(stat = "identity", width = 2)
library(ggplot2)
franzosa_cd <- read.csv("~/Documents/github/MetaFX_biology/enterocloster_clostridioformis/franzosa_cd.txt", sep = "\t", header = F)
franzosa_cd_sbs <- franzosa_cd[franzosa_cd$V3 > 0,]
ggplot(franzosa_cd, aes(V2, V3))+
geom_density()
ggplot(franzosa_cd_sbs, aes(V3))+
geom_density()
ggplot(franzosa_cd_sbs, aes(V2, V3))+
geom_smooth()
Maaslin2(emu_1, input_metadata = metadata_1_maaslin2,
output = "results/Maaslin2_CD_vs_UC",
min_abundance = 0.01,
min_prevalence = 25,
max_significance = 0.25,
fixed_effects = "group", reference = c("group", "UC"))
BiocManager::install("Maaslin2", force = T)
install.packages("â€˜Matrix")
install.packages("Matrix")
BiocManager::install("Maaslin2", force = T)
install.packages("lme4",
repos=c("http://lme4.r-forge.r-project.org/repos",
getOption("repos")[["CRAN"]]))
library("devtools"); install_github("lme4/lme4",dependencies=TRUE)
oo <- options(repos = c(CRAN="https://cran.r-project.org/"))
utils::install.packages("Matrix", type="binary")
utils::install.packages("Matrix", type="binary")
library(Maaslin2)
install_github("biobakery/Maaslin2")
install.packages('TMB', type = 'source')
install_github("biobakery/Maaslin2")
install_github("biobakery/Maaslin2", force = T)
install.packages('lme4', type = 'source')
d <- c(269596.54,
259325.92,
58952.13,
127734.24,
342016.18,
69999.74,
207734.55)
mean(d)
sd(d)
v <- c(161892.15,
40638.81,
102733.12,
64482.22,
106045.75)
v
mean(v)
df(v)
sd(v)
q()
update.packages()
q()
q()
q()
q()
q()
q()
q()
update.packages()
q()
q()
library(vegan)
library(fgsea)
library(limma)
library(BioNERO)
library(DESeq2)
library(lmerTest)
library(permutes)
library(tidyverse)
library(immunedeconv)
library(clusterProfiler)
library(ggpubr)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(ComplexHeatmap)
library(EnhancedVolcano)
library(msigdbr)
library(biomaRt)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(Orthology.eg.db)
#| message: false
#| warning: false
#| include: false
library(vegan)
library(fgsea)
library(limma)
library(BioNERO)
library(DESeq2)
library(lmerTest)
library(permutes)
library(tidyverse)
library(immunedeconv)
library(clusterProfiler)
library(ggpubr)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(ComplexHeatmap)
library(EnhancedVolcano)
library(msigdbr)
library(biomaRt)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(Orthology.eg.db)
#| label: Import libraries
#| echo: true
#| message: false
#| warning: false
library(vegan)
library(fgsea)
library(limma)
library(BioNERO)
library(DESeq2)
library(lmerTest)
library(permutes)
library(tidyverse)
library(immunedeconv)
library(clusterProfiler)
library(ggpubr)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
library(ComplexHeatmap)
library(EnhancedVolcano)
library(msigdbr)
library(biomaRt)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(Orthology.eg.db)
library(rmarkdown)
library(knitr)
library(knitr)
library(DT)
library(DT)
library(DT)
counts(ddsHTSeq)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = meta_data,
directory = "data/htseq/",
design= ~ 0 + group + batch)
#| label: Plot MSigDB hallmark gsea heatmap
#| echo: true
#| message: false
#| warning: false
get_subset <- function(df, group){
df.sbs <- df[c(1,6)]
df.sbs$group <- group
return(df.sbs)
}
fgsea.bif.sbs <- get_subset(fgsea.bif.filter, "M vs M_BIF")
library(vegan)
q()
df.all <- merge(gsva.food_oral[c(1,4)], df.all, by = 1)
setwd("/home/acari/Documents/github/cancer-biomarkers/")
library(ggplot2)
library(ggpubr)
library(phyloseq)
library(microViz)
library(vegan)
library(stringr)
library(Maaslin2)
library(RColorBrewer)
library(lmerTest)
library(multcomp)
library(NetCoMi)
library(clusterProfiler)
library(enrichplot)
library(GSVA)
# import data
otu_table <- read.csv("data/mags_relab.tsv", sep = "\t", row.names = 1)
taxonomy <- read.csv("data/taxonomy.tsv", sep = "\t", row.names = 1)
kingdom <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[1])
phylum <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[2])
class_t <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[3])
order_t <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[4])
family_t <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[5])
genus <- sapply(str_split(taxonomy$Taxon, ";"), function(x) x[6])
genus[genus == "g__"] <- paste0(family_t[which(genus == "g__")], "_unknown")
phylum <- sub("p__", "", phylum)
genus <- sub("g__", "", genus)
tax_table <- data.frame(kingdom, phylum, class = class_t, order = order_t, family = family_t, genus)
rownames(tax_table) <- rownames(taxonomy)
meta_data <- read.csv("data/metadata.tsv", sep = "\t", row.names = 1)
distance_matrics <- read.csv("data/rpca/distance-matrix.tsv", sep = "\t", row.names = 1)
ordination <- read.csv("data/rpca/ordination.txt", sep = "\t")
mag.biomarkers <- read.csv("data/mag.biomarkers.tsv", sep = "\t")
songbird_Frankel_2017 <- read.csv("data/songbird/Frankel_2017/differentials.tsv", sep = "\t")
songbird_Gopalakrishnan_2019 <- read.csv("data/songbird/Gopalakrishnan_2019/differentials.tsv", sep = "\t")
songbird_Matson_2019 <- read.csv("data/songbird/Matson_2019/differentials.tsv", sep = "\t")
songbird_Spencer_2021 <- read.csv("data/songbird/Spencer_2021/differentials.tsv", sep = "\t")
songbird_Lee_2022 <- read.csv("data/songbird/Lee_2022/differentials.tsv", sep = "\t")
songbird_Liu_2022 <- read.csv("data/songbird/Liu_2022/differentials.tsv", sep = "\t")
songbird_McCulloch_2022 <- read.csv("data/songbird/McCulloch_2022/differentials.tsv", sep = "\t")
songbird_Peng_2020 <- read.csv("data/songbird/Peng_2020/differentials.tsv", sep = "\t")
songbird_Tsakmaklis_2023 <- read.csv("data/songbird/Tsakmaklis_2023/differentials.tsv", sep = "\t")
songbird_Gunjur_2024 <- read.csv("data/songbird/Gunjur_2024/differentials.tsv", sep = "\t")
songbird_Heshiki_2020 <- read.csv("data/songbird/Heshiki_2020/differentials.tsv", sep = "\t")
body_site <- read.csv("data/body_ogu.tsv", sep = "\t")[-2]
colnames(body_site)[2] <- "site"
body_site$genome <- sub(".fa", "", body_site$genome)
food <- read.csv("data/food_ogu.txt", sep = "\t", header = F)
colnames(food) <- "genome"
food$site <- "food"
food$genome <- sub(".fa", "", food$genome)
# Genus plot
phyobj <- phyloseq(otu_table(otu_table, taxa_are_rows=FALSE),
sample_data(meta_data),
tax_table(as.matrix(tax_table)))
phyobj_100 <- transform_sample_counts(phyobj, function(x) 100 * x/sum(x))
phylum_barplot <- phyobj_100 %>% comp_barplot("phylum", merge_other = FALSE, label = NULL)+
facet_wrap(vars(response), scales = "free", nrow = 2)+
theme_minimal()+
theme(legend.position = "bottom")
genus_barplot <- phyobj_100 %>% comp_barplot("genus", merge_other = FALSE, label = NULL, n_taxa = 10)+
facet_wrap(~response, scales = "free", nrow = 2)+
theme_minimal()+
theme(legend.position = "bottom")
# Alpha diversity
shannon <- diversity(otu_table, index = "shannon")
shannon <- as.data.frame(shannon)
shannon <- cbind(rownames(shannon), shannon)
alpha.df <- merge(cbind(sampleid = rownames(meta_data), meta_data), shannon, by = 1)
shannon_boxplot_1 <- ggplot(alpha.df, aes(response, shannon, fill = response))+
geom_boxplot()+
theme_classic()+
theme(legend.position = "none")+
scale_fill_brewer(palette = "Set1")+
xlab("Shannon index")+
ylab("Dataset")+
stat_compare_means()
shannon_boxplot_2 <- ggplot(alpha.df, aes(shannon, dataset, fill = response))+
geom_boxplot()+
theme_bw()+
theme(legend.position = "bottom")+
scale_fill_brewer(palette = "Set1")+
xlab("Shannon index")+
ylab("Dataset")
lmer.shannon <- lmer(shannon ~ response + (1|dataset), data=alpha.df)
summary(glht(lmer.shannon, linfct = mcp(response = "Tukey")), test = adjusted("bonferroni"))
shapiro.test(residuals(lmer.shannon))
# Beta diversity
ordination <- merge(cbind(sampleid = rownames(meta_data), meta_data), ordination, by = 1)
mds_plot_1 <- ggplot(ordination)+
geom_point(mapping = aes(PC1, PC2, shape = response), size = 3.5, stroke = 1)+
geom_point(mapping = aes(PC1, PC2, col = response, shape = response), size = 3)+
theme_classic()+
scale_color_brewer(palette = "Set1")+
theme(legend.position = "right")+
xlab("PC1 (54%)")+
ylab("PC2 (34%)")
mds_plot_2 <- ggplot(ordination)+
geom_point(mapping = aes(PC1, PC2, shape = response), size = 3.5, stroke = 1)+
geom_point(mapping = aes(PC1, PC2, col = dataset, shape = response), size = 3)+
theme_classic()+
scale_color_manual(values = c(brewer.pal(n = 9, name = "Set1"), "black", "magenta"))+
theme(legend.position = "right")+
xlab("PC1 (54%)")+
ylab("PC2 (34%)")
adonis2(distance_matrics ~ response, data = meta_data, permutations = 9999, by = "margin")
# Songbird biomarkers
songbird_Frankel_2017_sbs <- songbird_Frankel_2017[songbird_Frankel_2017$featureid %in% mag.biomarkers$featureid,]
songbird_Frankel_2017_sbs$dataset <- "Frankel_2017"
songbird_Gopalakrishnan_2019_sbs <- songbird_Gopalakrishnan_2019[songbird_Gopalakrishnan_2019$featureid %in% mag.biomarkers$featureid,]
songbird_Gopalakrishnan_2019_sbs$dataset <- "Gopalakrishnan_2019"
songbird_Matson_2019_sbs <- songbird_Matson_2019[songbird_Matson_2019$featureid %in% mag.biomarkers$featureid,]
songbird_Matson_2019_sbs$dataset <- "Matson_2019"
songbird_Spencer_2021_sbs <- songbird_Spencer_2021[songbird_Spencer_2021$featureid %in% mag.biomarkers$featureid,]
songbird_Spencer_2021_sbs$dataset <- "Spencer_2021"
songbird_Lee_2022_sbs <- songbird_Lee_2022[songbird_Lee_2022$featureid %in% mag.biomarkers$featureid,]
songbird_Lee_2022_sbs$dataset <- "Lee_2022"
songbird_Liu_2022_sbs <- songbird_Liu_2022[songbird_Liu_2022$featureid %in% mag.biomarkers$featureid,]
songbird_Liu_2022_sbs$dataset <- "Liu_2022"
songbird_McCulloch_2022_sbs <- songbird_McCulloch_2022[songbird_McCulloch_2022$featureid %in% mag.biomarkers$featureid,]
songbird_McCulloch_2022_sbs$dataset <- "Liu_2022"
songbird_Peng_2020_sbs <- songbird_Peng_2020[songbird_Peng_2020$featureid %in% mag.biomarkers$featureid,]
songbird_Peng_2020_sbs$dataset <- "Peng_2020"
songbird_Tsakmaklis_2023_sbs <- songbird_Tsakmaklis_2023[songbird_Tsakmaklis_2023$featureid %in% mag.biomarkers$featureid,]
songbird_Tsakmaklis_2023_sbs$dataset <- "Tsakmaklis_2023"
songbird_Gunjur_2024_sbs <- songbird_Gunjur_2024[songbird_Gunjur_2024$featureid %in% mag.biomarkers$featureid,]
songbird_Gunjur_2024_sbs$dataset <- "Gunjur_2024"
songbird_Heshiki_2020_sbs <- songbird_Heshiki_2020[songbird_Heshiki_2020$featureid %in% mag.biomarkers$featureid,]
songbird_Heshiki_2020_sbs$dataset <- "Heshiki_2020"
songbird_coef <- rbind(songbird_Frankel_2017_sbs, songbird_Gopalakrishnan_2019_sbs, songbird_Matson_2019_sbs,
songbird_Spencer_2021_sbs, songbird_Lee_2022_sbs, songbird_Liu_2022_sbs, songbird_McCulloch_2022_sbs,
songbird_Peng_2020_sbs, songbird_Tsakmaklis_2023_sbs, songbird_Gunjur_2024_sbs, songbird_Heshiki_2020_sbs)
songbird_coef <- songbird_coef %>% group_by(featureid) %>% summarise(mean = mean(response.T.R.), sd = sd(response.T.R.))
songbird_coef <- as.data.frame(songbird_coef)
songbird_coef <- merge(cbind(featureid = rownames(tax_table), tax_table), songbird_coef, by = 1)
songbird_coef$phylum <- sapply(str_split(songbird_coef$phylum, "_"), function(x) x[1])
songbird_coef$genus <- sapply(str_split(songbird_coef$genus, "_"), function(x) x[1])
songbird_coef <- songbird_coef[order(songbird_coef$mean, decreasing = T),]
songbird_barplot <- ggplot(songbird_coef)+
geom_bar(aes(x=reorder(featureid, mean), y=mean), stat="identity")+
# geom_bar(aes(x=reorder(featureid, mean), y=mean, fill = phylum), stat="identity")+
# scale_fill_brewer(palette = "Set1")+
theme_classic()+
theme(axis.text = element_blank())+
ylab("mean R/NR + k")+
xlab("MAGs")
# Taxonomic
vec <- songbird_coef$mean
names(vec) <- songbird_coef$featureid
# Log ratio
denominator <- unique(c(food$genome , body_site$genome[body_site$site == "Oral cavity"]))
df.all <- NULL
for (i in rownames(otu_table)){
df <- otu_table[rownames(otu_table) %in% i,]
# df <- df[colSums(df) > 0]
df <- df[order(colSums(df), decreasing = T)]
df_denominator <- df[colnames(df) %in% denominator]
# df_denominator <- df[tail(colnames(df), n = 10)]
df_numerator <- df[head(colnames(df), n = 20)]
df_numerator <- df_numerator[!df_numerator %in% df_denominator]
df_denominator <- df_denominator[!df_denominator %in% df_numerator]
denum <- length(df_denominator[df_denominator > 0])
log_ratio <- log(sum(df_numerator)/sum(df_denominator + 0.001))
df.s <- data.frame(sampleid = i, log_ratio, denum)
df.all <- rbind(df.s, df.all)
}
df.all <- merge(df.all, cbind(rownames(meta_data), meta_data), by = 1)
logratio_boxplot <- ggplot(df.all)+
geom_boxplot(mapping = aes(response, log_ratio))+
geom_jitter(mapping = aes(response, log_ratio, col = response),
width = 0.25, alpha = 0.75, stroke = 1.25, shape = 1, size = 1)+
coord_flip()+
xlab("Response")+
ylab("Log ratio")+
theme_bw()+
theme(legend.position = "none")+
scale_color_brewer(palette = "Set1")
lmer.shannon <- lmer(log_ratio ~ response + (1|dataset), data=df.all)
summary(glht(lmer.shannon, linfct = mcp(response = "Tukey")), test = adjusted("bonferroni"))
shapiro.test(residuals(lmer.shannon))
denum_boxplot <- ggplot(df.all)+
geom_boxplot(mapping = aes(response, log_ratio))+
geom_jitter(mapping = aes(response, denum, col = response),
width = 0.25, alpha = 0.75, stroke = 1.25, shape = 1, size = 1)+
coord_flip()+
xlab("Response")+
ylab("Log ratio")+
theme_bw()+
theme(legend.position = "none")+
scale_color_brewer(palette = "Set1")
lmer.shannon <- lmer(rank(denum) ~ response + (1|dataset), data=df.all)
summary(glht(lmer.shannon, linfct = mcp(response = "Tukey")), test = adjusted("bonferroni"))
shapiro.test(residuals(lmer.shannon))
denum_log_ratio_scatterplot <- ggplot(df.all, aes(denum, log_ratio))+
geom_point()+
stat_smooth(col = "red", method = "loess")+
# facet_wrap(~response)+
theme_bw()+
xlab("Detected oral/food microbes")+
ylab("Log ratio")
GS <- list(`oral/food` = denominator)
gsvaPar <- gsvaParam(t(otu_table), GS)
gsva.es <- gsva(gsvaPar, verbose=FALSE)
gsva.food_oral <- as.data.frame(t(gsva.es))
gsva.food_oral <- merge(cbind(rownames(meta_data), meta_data), cbind(rownames(gsva.food_oral), gsva.food_oral), by = 1)
colnames(gsva.food_oral)[1] <- "sampleid"
gsva.food_oral <- gsva.food_oral[-4]
ggplot(gsva.food_oral)+
geom_boxplot(mapping = aes(response, rank(`oral/food`)))+
geom_jitter(mapping = aes(response, rank(`oral/food`), col = response),
width = 0.25, alpha = 0.75, stroke = 1.25, shape = 1, size = 1)+
coord_flip()+
xlab("Response")+
ylab("Log ratio")+
theme_bw()+
theme(legend.position = "none")+
scale_color_brewer(palette = "Set1")
lmer.shannon <- lmer(`oral/food` ~ response + (1|dataset), data=gsva.food_oral)
summary(glht(lmer.shannon, linfct = mcp(response = "Tukey")), test = adjusted("bonferroni"))
shapiro.test(residuals(lmer.shannon))
ggplot(gsva.food_oral, aes(df.all$log_ratio, gsva.food_oral$`oral/food`))+
geom_point()+
stat_smooth(col = "red", method = "loess")+
theme_bw()
cor.test(gsva.food_oral$`oral/food`, df.all$log_ratio)
df.all <- merge(gsva.food_oral[c(1,4)], df.all, by = 1)
df.all
df.all[c(5,6)]
df.all[-c(5,6)]
df.all.s <- df.all[-c(5,6)]
rownames(df.all.s) <- df.all.s$sampleid
df.all.s <- df.all.s[-1]
df.all.s
prcomp(df.all.s)
df.all.s
strdf.all.s
